---
title: "Prediction Challenge - Germany"
author: "Jonathan Kennel"
format:
  html:
    embed-resources: true
editor: visual
---


### Lagged linear regression model

This model can be interpreted and refined based on the responses of each regressor group.  It will not be the most accurate predictor, but it is fast and can help identify the most important components.


### Set-up

```{r}
#| warning: false
#| message: false
start_time <- Sys.time()
# Load helper packages
library(data.table)
library(plotly)
library(tidymodels)
library(hydrorecipes)
library(dlnm)
library(knitr)

# new names for predictors
nms_other <- c('datetime',
               'precipitation',
               'temperature_mean',
               'temperature_min',
               'temperature_max',
               'sea_pressure',
               'humidity',
               'wind',
               'insolation',
               'evapotranspiration')

```

### Prepare data

```{r}
#| echo: true

outcome    <- fread('data/Germany/heads.csv')
predictors <- fread('data/Germany/input_data.csv')

# make names more verbose
setnames(outcome, c('datetime', 'wl'))
setnames(predictors, nms_other)

# join data and make a numeric time column
dat <- outcome[predictors, on = 'datetime']

# join data and make a numeric time column
dat <- outcome[predictors, on = 'datetime']

# ad hoc estimate of water deficit. Use distributed lag model for predictors
dat[, deficit := cumsum(scale(precipitation)) - cumsum(scale(evapotranspiration))]
dat[, deficit := lm(deficit~splines::ns(datetime, df = 18))$residuals]
varknots <- dlnm::equalknots(dat$deficit, fun = "bs", degree = 3, df = 5)
lagknots <- logknots(365 * 3, 17)
cb <- crossbasis(dat$deficit, lag = 365 * 3,
                 argvar = list(fun = "bs", knots = varknots),
                 arglag = list(knots = lagknots))
dat <- cbind(dat, cb)

# date predictors
dat[, dow := lubridate::wday(datetime, label = FALSE)]
dat[, doy := lubridate::yday(datetime)]
dat[, mon := lubridate::month(datetime)]

# scaled precipitation based on ET
dat[, precip_evapo := precipitation * 1.0 / evapotranspiration]

# ad hoc snow melt
dat[, min_temp_diff := c(0, diff(temperature_min, lag = 1))]
dat[, snow_melt := 0]
dat[min_temp_diff >= 7  & month(datetime) %in% 1:3, snow_melt := 1]
dat[, snow_melt := pmin(snow_melt * precipitation, 1)]

# create feature dataset
all <- recipe(wl~., dat) |>
  step_interact(terms = ~ precipitation:evapotranspiration) |>
  step_interact(terms = ~ precipitation:temperature_mean) |>
  step_distributed_lag(sea_pressure,     knots = log_lags(5, 15)) |>
  step_distributed_lag(precipitation,    knots = log_lags(30, 180)) |>
  step_distributed_lag(precip_evapo,     knots = log_lags(21, 120)) |>
  step_distributed_lag(snow_melt, knots = log_lags(35, 90)) |>
  step_ns(humidity, deg_free = 20) |>
  step_ns(wind, deg_free = 8) |>
  step_ns(doy, deg_free = 13) |>
  step_ns(mon, deg_free = 6) |>
  step_ns(dow, deg_free = 4) |>
  step_rm(datetime) |>
  step_corr(all_predictors()) |>
  prep() |>
  bake(new_data = NULL)

setDT(all)


```

### Fit model

```{r}
fit <- lm(wl~., all)
```

### Make predictions

```{r}
dat <- cbind(dat, predict(fit, all, interval = "prediction"))
```

### Plot results

A median filter to smooth the results as they appeared to have too much variance.

```{r}

p1 <- plot_ly(dat, x = ~datetime, 
              y = ~wl, 
              type = "scatter", 
              mode = "lines", 
              name = "Water Level",
              line = list(color = "#808080")) |>
  add_lines(x = ~datetime, y = ~runmed(fit, 7), name = "Predictions" ,
            line = list(color = "#6000FF60"))

p2 <- plot_ly(dat, x = ~datetime, 
              y = ~wl - fit, 
              type = "scatter", 
              mode = "lines", 
              name = "Residuals",
              line = list(color = "#808080")) 
subplot(p1, p2, shareX = TRUE, nrows = 2)

```

### Output submission

```{r}
submission_times <- fread("submissions/team_example/submission_form_Germany.csv")
submission <- dat[datetime %in% submission_times$Date]

submission <- submission[, list(Date = datetime,
                         `Simulated Head"` = fit,
                         `95% Lower Bound` = lwr,
                         `95% Upper Bound` = upr)]
fwrite(submission, "submission_form_Germany_lm.csv")

end_time <- Sys.time()
```

### Timings

Total elapsed time is `r round(as.numeric(end_time) - as.numeric(start_time), 1)` seconds.

### Computer and software specs

Macbook Air M1 2020

16 GB Ram

```{r}
#| echo: true
sessionInfo()
```
